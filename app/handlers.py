from aiogram import F, Router, Bot
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.utils.markdown import hide_link
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from datetime import datetime

import keyboards.reply as kb_reply
import keyboards.inline as kb_inline
import app.database.requests as rq


router = Router()


class Reminder(StatesGroup):
    date_time = State()
    text = State()


@router.message(CommandStart())
async def start(message: Message):
    await rq.set_user(message.from_user.id)
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>",
        reply_markup=kb_reply.main,
        parse_mode='HTML')


@router.message(F.text == '–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')
async def set_reminder(message: Message, state: FSMContext):
    await state.set_state(Reminder.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")


@router.message(Reminder.text)
async def reminder_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    await state.set_state(Reminder.date_time)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.12.2023 23:59):')


@router.message(Reminder.date_time)
async def reminder_date(message: Message, state: FSMContext):
    try:
        date_time = datetime.strptime(message.text, '%d.%m.%Y %H:%M')
        await state.update_data(date_time=date_time)
        data = await state.get_data()
        await rq.set_reminder(message.from_user.id, data['date_time'], data['text'])

        await message.answer(
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ\n"
            f"<b>–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b> {data['text']}\n"
            f"<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b> {date_time.strftime('%d.%m.%Y –≤ %H:%M')}\n",
            parse_mode='HTML'
        )
        await state.clear()

    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.message(F.text.lower() == '–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'.lower())
async def all_reminders(message: Message):
    reminders_user = rq.get_reminders(message.from_user.id)
    if reminders_user:
        await message.answer("<strong>–í–æ—Ç –≤—Å–µ –≤–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</strong>", parse_mode='HTML')
        for rem in await reminders_user:
            await message.answer(f"<b>–¢–µ–∫—Å—Ç:</b> {rem.text}\n<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b> {rem.date_time}",
                                 parse_mode='HTML',
                                 reply_markup=await kb_inline.actions_reminders(rem.id)
                                 )
    else:
        await message.answer("–ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ—Çüò¢")


@router.callback_query(F.data.startswith('delete_reminder_'))
async def delete_reminder(callback: CallbackQuery):
    reminder_data = await rq.get_reminder(callback.data.split('_')[-1])
    await callback.answer(
        f'–í—ã —É–¥–∞–ª–∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_data.text}'
        f'\n –Ω–∞ {reminder_data.date_time}',
        show_alert=True)
    await rq.delete_reminder(callback.data.split('_')[-1])


@router.message(F.photo)
async def download_photo(message: Message, bot: Bot):
    await bot.download(
        message.photo[-1],
        destination=f"D:/{message.photo[-1].file_id}.jpg"
    )


@router.message()
async def any_message(message: Message):
    text = message.text
    if text in ['–ü—Ä–∏–≤–µ—Ç', '–ø—Ä–∏–≤–µ—Ç', 'hi', 'hello']:
        await message.answer(f"–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç {message.from_user.first_name}")
    else:
        await message.reply(
            f"{hide_link('https://telegra.ph/file/562a512448876923e28c3.png')}"
            f"–ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ, –Ω–æ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!", parse_mode='HTML')
